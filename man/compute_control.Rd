% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_control.R
\name{compute_control}
\alias{compute_control}
\title{Generate a negative control.}
\usage{
compute_control(randomized_windows, dataset, window_number, cor_method)
}
\arguments{
\item{randomized_windows}{A list containing as many elements as randomized top windows
have been computed.}

\item{dataset}{A data frame containing the binned data.}

\item{window_number}{An integer indicating the bin for which the control is being computed.}

\item{cor_method}{A string indicating the type of correlation to use.}
}
\value{
A list containing the negative control: a vector of correlations corresponding to
correlating each randomized window to the chosen window in the data.
}
\description{
Computes correlations for all the randomized windows against a window of choice.
}
\details{
\code{compute_control} only correlates the set of randomized windows to one of the windows
into which the data set was divided. Therefore, it needs to be called once for each window.

The correlation vector for each random is generated by iterating the genes in it and
correlating them to those in the selected window. As a result, there will be as many
correlation values in the vector as genes in the top window. At the same time, the output
will have as many elements as randomized versions of the top window have been computed.
Consequently, both top window size and number of randomizations impact the computation speed
of the process.

The correlation method argument is passed on to the \code{cor} function, in the \code{stats}
package, and therefore, the same options as this function provides are available. However, it
is adviseable to use pearson correlation, since it presents the most advantageous balance of
result quality and computational efficiency.
}

